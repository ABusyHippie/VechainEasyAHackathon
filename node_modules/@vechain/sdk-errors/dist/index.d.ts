/**
 * @note: REGISTER YOUR NEW FANCY ERRORS BELOW!
 */
/**
 * Default error data type. it accepts any object.
 *
 * @param ErrorCodeT - The error code type from the error types enum.
 */
type DefaultErrorData = Record<string, unknown> | {
    innerError: Error;
};
/**
 * Error code type.
 */
type ErrorCode = SECP256K1 | ADDRESS | KEYSTORE | HDNODE | BLOOM | CERTIFICATE | ABI | RLP_ERRORS | DATA | TRANSACTION | HTTP_CLIENT | POLL_ERROR | FUNCTION | EIP1193 | JSONRPC | CONTRACT;
/**
 * Conditional type to get the error data type from the error code.
 * The type is used to specify the data type of the error builder.
 *
 * @param ErrorCodeT - The error code type from the error types enum.
 */
type DataType<ErrorCodeT extends ErrorCode> = ErrorCodeT extends RLP_ERRORS.INVALID_RLP ? InvalidRLPErrorData : ErrorCodeT extends HTTP_CLIENT.INVALID_HTTP_REQUEST ? HTTPClientErrorData : ErrorCodeT extends POLL_ERROR.POLL_EXECUTION_ERROR ? PollErrorData : ErrorCodeT extends EIP1193.USER_REJECTED_REQUEST ? EIP1193ProviderRpcErrorData : ErrorCodeT extends EIP1193.UNAUTHORIZED ? EIP1193ProviderRpcErrorData : ErrorCodeT extends EIP1193.UNSUPPORTED_METHOD ? EIP1193ProviderRpcErrorData : ErrorCodeT extends EIP1193.DISCONNECTED ? EIP1193ProviderRpcErrorData : ErrorCodeT extends EIP1193.CHAIN_DISCONNECTED ? EIP1193ProviderRpcErrorData : ErrorCodeT extends JSONRPC.INVALID_REQUEST ? JSONRPCErrorData : ErrorCodeT extends JSONRPC.INVALID_PARAMS ? JSONRPCErrorData : ErrorCodeT extends JSONRPC.INTERNAL_ERROR ? JSONRPCErrorData : DefaultErrorData;
/**
 * Default error codes.
 */
declare const ERROR_CODES: {
    SECP256K1: typeof SECP256K1;
    ADDRESS: typeof ADDRESS;
    KEYSTORE: typeof KEYSTORE;
    HDNODE: typeof HDNODE;
    BLOOM: typeof BLOOM;
    CERTIFICATE: typeof CERTIFICATE;
    ABI: typeof ABI;
    RLP: typeof RLP_ERRORS;
    DATA: typeof DATA;
    TRANSACTION: typeof TRANSACTION;
    HTTP_CLIENT: typeof HTTP_CLIENT;
    POLL_ERROR: typeof POLL_ERROR;
    FUNCTION: typeof FUNCTION;
    EIP1193: typeof EIP1193;
    JSONRPC: typeof JSONRPC;
    CONTRACT: typeof CONTRACT;
};
/**
 * Conditional type to get the error type from the error code.
 * The type is used to specify the return type of the error builder.
 *
 * @note When adding a new error, add the error code and the error class to the type.
 *
 * @param ErrorCodeT - The error code type from the error types enum.
 */
type ErrorType<ErrorCodeT> = ErrorCodeT extends SECP256K1.INVALID_SECP256k1_PRIVATE_KEY ? InvalidSecp256k1PrivateKeyError : ErrorCodeT extends SECP256K1.INVALID_SECP256k1_MESSAGE_HASH ? InvalidSecp256k1MessageHashError : ErrorCodeT extends SECP256K1.INVALID_SECP256k1_SIGNATURE ? InvalidSecp256k1SignatureError : ErrorCodeT extends SECP256K1.INVALID_SECP256k1_SIGNATURE_RECOVERY ? InvalidSecp256k1SignatureRecoveryError : ErrorCodeT extends ADDRESS.INVALID_ADDRESS ? InvalidAddressError : ErrorCodeT extends KEYSTORE.INVALID_KEYSTORE ? InvalidKeystoreError : ErrorCodeT extends KEYSTORE.INVALID_PASSWORD ? InvalidKeystorePasswordError : ErrorCodeT extends HDNODE.INVALID_HDNODE_CHAIN_CODE ? InvalidHDNodeChaincodeError : ErrorCodeT extends HDNODE.INVALID_HDNODE_MNEMONICS ? InvalidHDNodeMnemonicsError : ErrorCodeT extends HDNODE.INVALID_HDNODE_PRIVATE_KEY ? InvalidHDNodePrivateKeyError : ErrorCodeT extends HDNODE.INVALID_HDNODE_PUBLIC_KEY ? InvalidHDNodePublicKeyError : ErrorCodeT extends HDNODE.INVALID_HDNODE_DERIVATION_PATH ? InvalidHDNodeDerivationPathError : ErrorCodeT extends BLOOM.INVALID_BLOOM ? InvalidBloomError : ErrorCodeT extends BLOOM.INVALID_K ? InvalidKError : ErrorCodeT extends CERTIFICATE.CERTIFICATE_NOT_SIGNED ? CertificateNotSignedError : ErrorCodeT extends CERTIFICATE.CERTIFICATE_INVALID_SIGNATURE_FORMAT ? CertificateInvalidSignatureFormatError : ErrorCodeT extends CERTIFICATE.CERTIFICATE_INVALID_SIGNER ? CertificateInvalidSignerError : ErrorCodeT extends ABI.INVALID_EVENT ? InvalidAbiEventError : ErrorCodeT extends ABI.INVALID_DATA_TO_DECODE ? InvalidAbiDataToDecodeError : ErrorCodeT extends ABI.INVALID_DATA_TO_ENCODE ? InvalidAbiDataToEncodeError : ErrorCodeT extends ABI.INVALID_FORMAT_TYPE ? InvalidAbiFormatTypeError : ErrorCodeT extends ABI.INVALID_FUNCTION ? InvalidAbiFunctionError : ErrorCodeT extends ABI.CONTRACT_INTERFACE_ERROR ? ContractInterfaceError : ErrorCodeT extends RLP_ERRORS.INVALID_RLP ? InvalidRLPError : ErrorCodeT extends DATA.INVALID_DATA_TYPE ? InvalidDataTypeError : ErrorCodeT extends DATA.INVALID_DATA_RETURN_TYPE ? InvalidDataReturnTypeError : ErrorCodeT extends TRANSACTION.ALREADY_SIGNED ? TransactionAlreadySignedError : ErrorCodeT extends TRANSACTION.NOT_SIGNED ? TransactionNotSignedError : ErrorCodeT extends TRANSACTION.INVALID_TRANSACTION_BODY ? TransactionBodyError : ErrorCodeT extends TRANSACTION.INVALID_DELEGATION ? TransactionDelegationError : ErrorCodeT extends TRANSACTION.MISSING_PRIVATE_KEY ? TransactionMissingPrivateKeyError : ErrorCodeT extends HTTP_CLIENT.INVALID_HTTP_REQUEST ? HTTPClientError : ErrorCodeT extends POLL_ERROR.POLL_EXECUTION_ERROR ? PollExecutionError : ErrorCodeT extends EIP1193.USER_REJECTED_REQUEST ? EIP1193UserRejectedRequest : ErrorCodeT extends EIP1193.UNAUTHORIZED ? EIP1193Unauthorized : ErrorCodeT extends EIP1193.UNSUPPORTED_METHOD ? EIP1193UnsupportedMethod : ErrorCodeT extends EIP1193.DISCONNECTED ? EIP1193Disconnected : ErrorCodeT extends EIP1193.CHAIN_DISCONNECTED ? EIP1193ChainDisconnected : ErrorCodeT extends FUNCTION.NOT_IMPLEMENTED ? NotImplementedError : ErrorCodeT extends JSONRPC.INVALID_REQUEST ? JSONRPCInvalidRequest : ErrorCodeT extends JSONRPC.INVALID_PARAMS ? JSONRPCInvalidParams : ErrorCodeT extends JSONRPC.INTERNAL_ERROR ? JSONRPCInternalError : ErrorCodeT extends JSONRPC.DEFAULT ? JSONRPCDefaultError : ErrorCodeT extends CONTRACT.CONTRACT_DEPLOYMENT_FAILED ? ContractDeploymentFailedError : never;
/**
 * Map to get the error class from the error code.
 * The class is used to construct the error object.
 *
 * @note When adding a new error, add the error code and the error class to the map.
 *
 * @param ErrorCodeT - The error code type from the error types enum.
 */
declare const ErrorClassMap: Map<ErrorCode, typeof ErrorBase<ErrorCode, DataType<ErrorCode>>>;

/**
 * Base error class to construct all other errors from.
 * @param ErrorCodeT - The error code type from the error types enum.
 * @param DataTypeT - The error data type.
 * @param code - The error code from the error types enum.
 * @param message - The error message.
 * @param data - The error data.
 * @returns The error object.
 */
declare class ErrorBase<ErrorCodeT extends ErrorCode, DataTypeT> extends Error {
    code: ErrorCodeT;
    message: string;
    data?: DataTypeT;
    innerError?: Error;
    constructor({ code, message, data, innerError }: {
        code: ErrorCodeT;
        message: string;
        data?: DataTypeT;
        innerError?: Error;
    });
}

/**
 * Invalid data to decode error to be thrown when an invalid data is detected during decoding.
 */
declare class InvalidAbiDataToDecodeError extends ErrorBase<ABI.INVALID_DATA_TO_DECODE, DefaultErrorData> {
}
/**
 * Invalid data to encode error to be thrown when an invalid data is detected during encoding.
 */
declare class InvalidAbiDataToEncodeError extends ErrorBase<ABI.INVALID_DATA_TO_ENCODE, DefaultErrorData> {
}
/**
 * Invalid event error to be thrown when an invalid event is detected.
 */
declare class InvalidAbiEventError extends ErrorBase<ABI.INVALID_EVENT, DefaultErrorData> {
}
/**
 * Invalid format error to be thrown when an invalid format is provided.
 */
declare class InvalidAbiFormatTypeError extends ErrorBase<ABI.INVALID_FORMAT_TYPE, DefaultErrorData> {
}
/**
 * Invalid function error to be thrown when an invalid function is detected.
 */
declare class InvalidAbiFunctionError extends ErrorBase<ABI.INVALID_FUNCTION, DefaultErrorData> {
}
/**
 * Invalid function error to be thrown when an invalid function is detected.
 */
declare class ContractInterfaceError extends ErrorBase<ABI.CONTRACT_INTERFACE_ERROR, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum ABI {
    INVALID_FUNCTION = "INVALID_FUNCTION",
    INVALID_EVENT = "INVALID_EVENT",
    INVALID_DATA_TO_DECODE = "INVALID_DATA_TO_DECODE",
    INVALID_DATA_TO_ENCODE = "INVALID_DATA_TO_ENCODE",
    INVALID_FORMAT_TYPE = "INVALID_FORMAT_TYPE",
    CONTRACT_INTERFACE_ERROR = "CONTRACT_INTERFACE_ERROR"
}

/**
 * Invalid address error to be thrown when an invalid address is provided.
 */
declare class InvalidAddressError extends ErrorBase<ADDRESS.INVALID_ADDRESS, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum ADDRESS {
    INVALID_ADDRESS = "INVALID_ADDRESS"
}

/**
 * Invalid bloom error to be thrown when an invalid bloom is detected.
 */
declare class InvalidBloomError extends ErrorBase<BLOOM.INVALID_BLOOM, DefaultErrorData> {
}
/**
 * Invalid k error to be thrown when an invalid k is detected.
 */
declare class InvalidKError extends ErrorBase<BLOOM.INVALID_K, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum BLOOM {
    INVALID_BLOOM = "INVALID_BLOOM",
    INVALID_K = "INVALID_K"
}

/**
 * Certificate not signed.
 */
declare class CertificateNotSignedError extends ErrorBase<CERTIFICATE.CERTIFICATE_NOT_SIGNED, DefaultErrorData> {
}
/**
 * Certificate signature format is invalid.
 */
declare class CertificateInvalidSignatureFormatError extends ErrorBase<CERTIFICATE.CERTIFICATE_INVALID_SIGNATURE_FORMAT, DefaultErrorData> {
}
/**
 * Certificate signer is invalid.
 */
declare class CertificateInvalidSignerError extends ErrorBase<CERTIFICATE.CERTIFICATE_INVALID_SIGNER, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum CERTIFICATE {
    CERTIFICATE_NOT_SIGNED = "CERTIFICATE_NOT_SIGNED",
    CERTIFICATE_INVALID_SIGNATURE_FORMAT = "CERTIFICATE_INVALID_SIGNATURE_FORMAT",
    CERTIFICATE_INVALID_SIGNER = "CERTIFICATE_INVALID_SIGNER"
}

/**
 * Error to be thrown when the contract deployment failed.
 */
declare class ContractDeploymentFailedError extends ErrorBase<CONTRACT.CONTRACT_DEPLOYMENT_FAILED, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum CONTRACT {
    CONTRACT_DEPLOYMENT_FAILED = "CONTRACT_DEPLOYMENT_FAILED"
}

/**
 * Invalid data error to be thrown when an invalid data is detected.
 */
declare class InvalidDataTypeError extends ErrorBase<DATA.INVALID_DATA_TYPE, DefaultErrorData> {
}
/**
 * Invalid return type given as input.
 */
declare class InvalidDataReturnTypeError extends ErrorBase<DATA.INVALID_DATA_RETURN_TYPE, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum DATA {
    INVALID_DATA_TYPE = "INVALID_DATA_TYPE",
    INVALID_DATA_RETURN_TYPE = "INVALID_DATA_RETURN_TYPE"
}

/**
 * Invalid chaincode error to be thrown when an invalid chaincode is detected.
 */
declare class InvalidHDNodeChaincodeError extends ErrorBase<HDNODE.INVALID_HDNODE_CHAIN_CODE, DefaultErrorData> {
}
/**
 * Invalid mnemonics error to be thrown when an invalid mnemonic is provided.
 */
declare class InvalidHDNodeMnemonicsError extends ErrorBase<HDNODE.INVALID_HDNODE_MNEMONICS, DefaultErrorData> {
}
/**
 * Invalid private key error to be thrown when an invalid private key is detected.
 */
declare class InvalidHDNodePrivateKeyError extends ErrorBase<HDNODE.INVALID_HDNODE_PRIVATE_KEY, DefaultErrorData> {
}
/**
 * Invalid public key error to be thrown when an invalid public key is detected.
 */
declare class InvalidHDNodePublicKeyError extends ErrorBase<HDNODE.INVALID_HDNODE_PUBLIC_KEY, DefaultErrorData> {
}
/**
 * Invalid derivation path error to be thrown when an invalid derivation path is detected.
 */
declare class InvalidHDNodeDerivationPathError extends ErrorBase<HDNODE.INVALID_HDNODE_DERIVATION_PATH, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum HDNODE {
    INVALID_HDNODE_PUBLIC_KEY = "INVALID_HDNODE_PUBLIC_KEY",
    INVALID_HDNODE_PRIVATE_KEY = "INVALID_HDNODE_PRIVATE_KEY",
    INVALID_HDNODE_CHAIN_CODE = "INVALID_HDNODE_CHAIN_CODE",
    INVALID_HDNODE_MNEMONICS = "INVALID_HDNODE_MNEMONICS",
    INVALID_HDNODE_DERIVATION_PATH = "INVALID_HDNODE_DERIVATION_PATH"
}

/**
 * Invalid keystore error to be thrown when an invalid keystore is detected.
 */
declare class InvalidKeystoreError extends ErrorBase<KEYSTORE.INVALID_KEYSTORE, DefaultErrorData> {
}
/**
 * Invalid password error to be thrown when an invalid password is provided.
 */
declare class InvalidKeystorePasswordError extends ErrorBase<KEYSTORE.INVALID_PASSWORD, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum KEYSTORE {
    INVALID_KEYSTORE = "INVALID_KEYSTORE",
    INVALID_PASSWORD = "INVALID_PASSWORD"
}

/**
 * Invalid RLP_ERRORS error data interface.
 */
interface InvalidRLPErrorData {
    context: string;
}
/**
 * Invalid RLP_ERRORS error to be thrown when an invalid RLP_ERRORS is detected.
 */
declare class InvalidRLPError extends ErrorBase<RLP_ERRORS.INVALID_RLP, InvalidRLPErrorData> {
}
/**
 * Errors enum.
 */
declare enum RLP_ERRORS {
    INVALID_RLP = "INVALID_RLP"
}

/**
 * Error to be thrown when the private key is invalid.
 */
declare class InvalidSecp256k1PrivateKeyError extends ErrorBase<SECP256K1.INVALID_SECP256k1_PRIVATE_KEY, DefaultErrorData> {
}
/**
 * Error to be thrown when the message hash is invalid.
 */
declare class InvalidSecp256k1MessageHashError extends ErrorBase<SECP256K1.INVALID_SECP256k1_MESSAGE_HASH, DefaultErrorData> {
}
/**
 * Error to be thrown when the signature is invalid.
 */
declare class InvalidSecp256k1SignatureError extends ErrorBase<SECP256K1.INVALID_SECP256k1_SIGNATURE, DefaultErrorData> {
}
/**
 * Error to be thrown when the signature recovery is invalid.
 */
declare class InvalidSecp256k1SignatureRecoveryError extends ErrorBase<SECP256K1.INVALID_SECP256k1_SIGNATURE_RECOVERY, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum SECP256K1 {
    INVALID_SECP256k1_PRIVATE_KEY = "INVALID_SECP256k1_PRIVATE_KEY",
    INVALID_SECP256k1_MESSAGE_HASH = "INVALID_SECP256k1_MESSAGE_HASH",
    INVALID_SECP256k1_SIGNATURE = "INVALID_SECP256k1_SIGNATURE",
    INVALID_SECP256k1_SIGNATURE_RECOVERY = "INVALID_SECP256k1_SIGNATURE_RECOVERY"
}

/**
 * Invalid Transaction to sign. It is already signed.
 */
declare class TransactionAlreadySignedError extends ErrorBase<TRANSACTION.ALREADY_SIGNED, DefaultErrorData> {
}
/**
 * Transaction not signed.
 */
declare class TransactionNotSignedError extends ErrorBase<TRANSACTION.NOT_SIGNED, DefaultErrorData> {
}
/**
 * Invalid Transaction body.
 */
declare class TransactionBodyError extends ErrorBase<TRANSACTION.INVALID_TRANSACTION_BODY, DefaultErrorData> {
}
/**
 * Invalid Delegation feature.
 */
declare class TransactionDelegationError extends ErrorBase<TRANSACTION.INVALID_DELEGATION, DefaultErrorData> {
}
/**
 * Error to be thrown when the private key is missing.
 */
declare class TransactionMissingPrivateKeyError extends ErrorBase<TRANSACTION.MISSING_PRIVATE_KEY, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum TRANSACTION {
    ALREADY_SIGNED = "ALREADY_SIGNED",
    NOT_SIGNED = "NOT_SIGNED",
    INVALID_TRANSACTION_BODY = "INVALID_TRANSACTION_BODY",
    INVALID_DELEGATION = "INVALID_DELEGATION",
    MISSING_PRIVATE_KEY = "MISSING_PRIVATE_KEY"
}

/**
 * HTTP Client Error.
 */
interface HTTPClientErrorData {
    status?: number;
    method?: string;
    url?: string;
    text?: string;
    message?: string;
}
/**
 * Client error to be thrown when a http request fails.
 */
declare class HTTPClientError extends ErrorBase<HTTP_CLIENT.INVALID_HTTP_REQUEST, HTTPClientErrorData> {
}
/**
 * Errors enum.
 */
declare enum HTTP_CLIENT {
    INVALID_HTTP_REQUEST = "INVALID_HTTP_REQUEST"
}

/**
 * POLL Error.
 */
interface PollErrorData {
    message?: string;
    functionName?: string;
}
/**
 * Client error to be thrown when a http request fails.
 */
declare class PollExecutionError extends ErrorBase<POLL_ERROR.POLL_EXECUTION_ERROR, PollErrorData> {
}
/**
 * Errors enum.
 */
declare enum POLL_ERROR {
    POLL_EXECUTION_ERROR = "POLL_EXECUTION_ERROR"
}

/**
 * Not implemented function
 */
declare class NotImplementedError extends ErrorBase<FUNCTION.NOT_IMPLEMENTED, DefaultErrorData> {
}
/**
 * Errors enum.
 */
declare enum FUNCTION {
    NOT_IMPLEMENTED = "NOT_IMPLEMENTED"
}

/**
 * Errors implementation of EIP-1193 provider standard.
 *
 * @see https://eips.ethereum.org/EIPS/eip-1193#errors
 * @see https://eips.ethereum.org/EIPS/eip-1193#provider-errors
 */

/**
 * HTTP Client Error.
 *
 * @NOTE: code parameter is required to be fully compatible with EIP-1193.
 * When we will throw error, we will use EIP1193.CODE_..., but for syntactic sugar
 * we will have code as number into error data.
 */
interface EIP1193ProviderRpcErrorData {
    code: 4001 | 4100 | 4200 | 4900 | 4901;
    data?: unknown;
}
/**
 * The user rejected the request.
 */
declare class EIP1193UserRejectedRequest extends ErrorBase<EIP1193.USER_REJECTED_REQUEST, EIP1193ProviderRpcErrorData> {
}
/**
 * The requested method and/or account has not been authorized by the user.
 */
declare class EIP1193Unauthorized extends ErrorBase<EIP1193.UNAUTHORIZED, EIP1193ProviderRpcErrorData> {
}
/**
 * The Provider does not support the requested method.
 */
declare class EIP1193UnsupportedMethod extends ErrorBase<EIP1193.UNSUPPORTED_METHOD, EIP1193ProviderRpcErrorData> {
}
/**
 * The Provider is disconnected from all chains.
 */
declare class EIP1193Disconnected extends ErrorBase<EIP1193.DISCONNECTED, EIP1193ProviderRpcErrorData> {
}
/**
 * The Provider is not connected to the requested chain.
 *
 * @NOTE 4900 is intended to indicate that the Provider is disconnected from all chains,
 * while 4901 is intended to indicate that the Provider is disconnected from a specific chain only.
 * In other words, 4901 implies that the Provider is connected to other chains, just not the requested one.
 */
declare class EIP1193ChainDisconnected extends ErrorBase<EIP1193.CHAIN_DISCONNECTED, EIP1193ProviderRpcErrorData> {
}
/**
 * Errors enum.
 *
 * @see https://eips.ethereum.org/EIPS/eip-1193#rpc-errors
 */
declare enum EIP1193 {
    /**
     * The user rejected the request.
     */
    USER_REJECTED_REQUEST = "USER_REJECTED_REQUEST",
    /**
     * The requested method and/or account has not been authorized by the user.
     */
    UNAUTHORIZED = "UNAUTHORIZED",
    /**
     * The Provider does not support the requested method.
     */
    UNSUPPORTED_METHOD = "UNSUPPORTED METHOD",
    /**
     * The Provider is disconnected from all chains.
     */
    DISCONNECTED = "DISCONNECTED",
    /**
     * The Provider is not connected to the requested chain.
     *
     * @NOTE 4900 is intended to indicate that the Provider is disconnected from all chains,
     * while 4901 is intended to indicate that the Provider is disconnected from a specific chain only.
     * In other words, 4901 implies that the Provider is connected to other chains, just not the requested one.
     */
    CHAIN_DISCONNECTED = "CHAIN_DISCONNECTED"
}
/**
 * Get correct error code by error message enum.
 */
declare const getEIP1193ErrorCode: (error: EIP1193) => 4001 | 4100 | 4200 | 4900 | 4901;

/**
 * Errors implementation of JSON-RPC standard.
 *
 * @see https://docs.infura.io/networks/ethereum/json-rpc-methods
 * @see https://github.com/ethereum/go-ethereum/blob/master/rpc/errors.go
 */

/**
 * HTTP Client Error.
 *
 * @NOTE: code parameter is required to be fully compatible with EIP-1193.
 * When we will throw error, we will use EIP1193.CODE_..., but for syntactic sugar
 * we will have code as number into error data.
 */
interface JSONRPCErrorData {
    code: -32700 | -32600 | -32601 | -32602 | -32603 | -32000;
    message: string;
}
/**
 * JSON is not a valid request object
 */
declare class JSONRPCInvalidRequest extends ErrorBase<JSONRPC.INVALID_REQUEST, JSONRPCErrorData> {
}
/**
 * Invalid method parameters
 */
declare class JSONRPCInvalidParams extends ErrorBase<JSONRPC.INVALID_PARAMS, JSONRPCErrorData> {
}
/**
 * Internal JSON-RPC error
 */
declare class JSONRPCInternalError extends ErrorBase<JSONRPC.INTERNAL_ERROR, JSONRPCErrorData> {
}
/**
 * Default error
 *
 * @see https://github.com/ethereum/go-ethereum/blob/master/rpc/errors.go
 */
declare class JSONRPCDefaultError extends ErrorBase<JSONRPC.DEFAULT, JSONRPCErrorData> {
}
/**
 * Errors enum.
 *
 * @see https://eips.ethereum.org/EIPS/eip-1193#rpc-errors
 */
declare enum JSONRPC {
    INVALID_REQUEST = "INVALID_REQUEST",
    INVALID_PARAMS = "INVALID_PARAMS",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    DEFAULT = "DEFAULT"
}
/**
 * Get correct error code by error message enum.
 */
declare const getJSONRPCErrorCode: (error: JSONRPC) => -32600 | -32602 | -32603 | -32000;

/**
 * The `ProviderRpcError` error is thrown when the provider returns an error
 *
 * @link [ProviderRpcError](https://eips.ethereum.org/EIPS/eip-1193#provider-errors)
 */
declare class ProviderRpcError extends Error {
    /**
     * The error code as specified in EIP-1193 or EIP-1474
     *
     * @link [EIP-1474](https://eips.ethereum.org/EIPS/eip-1474#error-codes)
     * @link [EIP-1193](https://eips.ethereum.org/EIPS/eip-1193#provider-errors)
     */
    code: number;
    /**
     * Contains optional extra information about the error
     */
    data?: unknown;
    /**
     *
     * @param code - The error code as specified in EIP-1193 or EIP-1474
     * @param message - The error message
     * @param data - Contains optional extra information about the error
     */
    constructor(code: number, message?: string, data?: unknown);
}

/**
 * Builds an error object with the error code provided and specified parameters.
 *
 * @param {string} methodName - The name of the method where the error occurred.
 * @param {ErrorCodeT} code - The error code.
 * @param {string} message - The error message.
 * @param {DataTypeT} [data] - Additional data associated with the error.
 * @param {unknown} [innerError] - An inner error associated with the error.
 *
 * @returns {ErrorType<ErrorCodeT>} - The error object.
 *
 * @throws {Error} - If the error code is invalid.
 *
 * @remarks
 * **IMPORTANT: no sensitive data should be passed as any parameter.**
 */
declare function buildError<ErrorCodeT extends ErrorCode, DataTypeT extends DataType<ErrorCodeT>>(methodName: string, code: ErrorCodeT, message: string, data?: DataTypeT, innerError?: unknown): ErrorType<ErrorCodeT>;

/**
 * Builds a ProviderRpcError object with the given code, message, and data,
 * according [Rpc Errors](https://eips.ethereum.org/EIPS/eip-1193#rpc-errors)
 *
 * @param {EIP1193 | JSONRPC} code - The error code.
 * @param {string} message - The error message.
 * @param {DataTypeT} [data] - Optional data associated with the error.
 * @return {ProviderRpcError} - The constructed ProviderRpcError object.
 *
 * @remarks
 * **IMPORTANT: no sensitive data should be passed as any parameter.**
 */
declare function buildProviderError<ErrorCodeT extends ErrorCode, DataTypeT extends DataType<ErrorCodeT>>(code: EIP1193 | JSONRPC, message: string, data?: DataTypeT): ProviderRpcError;

/**
 * Function to stringify data correctly.
 * Some data types like Error, Map, Set, etc. are not stringified correctly by JSON.stringify.
 * This function handles those cases and avoid circular references.
 *
 * @param data - The data to be stringified.
 * @returns The stringified data.
 */
declare const stringifyData: (data: unknown) => string;
/**
 * Builds an error message with the specified method name, error message, input data, and optional inner error.
 *
 * @param {string} methodName - The name of the method that failed.
 * @param {string} errorMessage - The specific reason for the failure.
 * @param {DataType} inputData - The input data used by the method.
 * @param {Error} [innerError] - An optional inner error that caused the failure.
 *
 * @return {string} - The built error message.
 *
 * @remarks
 * **IMPORTANT: no sensitive data should be passed as any parameter.**
 */
declare function buildErrorMessage<ErrorCodeT extends ErrorCode, DataTypeT extends DataType<ErrorCodeT>>(methodName: string, errorMessage: string, inputData: DataTypeT, innerError?: Error): string;

/**
 * Asserts that a given condition is true. If the condition is false, an error is thrown.
 *
 * @param {string} methodName - The name of the method or function being asserted.
 * @param {boolean} condition - The condition to be asserted.
 * @param {ErrorCode} code - The error code to be associated with the error if the condition is false.
 * @param {string} message - The error message to be associated with the error if the condition is false.
 * @param {DataType} [data] - Additional data to be associated with the error if the condition is false.
 * @param {unknown} [innerError] - The inner error to be associated with the error if the condition is false.
 *
 * @returns {void}
 *
 * @throws {Error} An error object if the condition is false.
 *
 * @remarks
 * **IMPORTANT: no sensitive data should be passed as any parameter.**
 */
declare function assert<ErrorCodeT extends ErrorCode, DataTypeT extends DataType<ErrorCodeT>>(methodName: string, condition: boolean, code: ErrorCodeT, message: string, data?: DataTypeT, innerError?: unknown): void;
/**
 * Asserts that the given error is an instance of the Error class.
 * If the error is an instance of Error, it is returned.
 * If the error is not an instance of Error, a new Error object is created with a descriptive message.
 *
 * @param {unknown} error - The error to be asserted.
 * @return {Error} - The error if it is an instance of Error, or a new Error object if it is not.
 *
 * @remarks
 * **IMPORTANT: no sensitive data should be passed as any parameter.**
 */
declare function assertInnerError(error: unknown): Error;

type errors_ABI = ABI;
declare const errors_ABI: typeof ABI;
type errors_ADDRESS = ADDRESS;
declare const errors_ADDRESS: typeof ADDRESS;
type errors_BLOOM = BLOOM;
declare const errors_BLOOM: typeof BLOOM;
type errors_CERTIFICATE = CERTIFICATE;
declare const errors_CERTIFICATE: typeof CERTIFICATE;
type errors_CONTRACT = CONTRACT;
declare const errors_CONTRACT: typeof CONTRACT;
type errors_CertificateInvalidSignatureFormatError = CertificateInvalidSignatureFormatError;
declare const errors_CertificateInvalidSignatureFormatError: typeof CertificateInvalidSignatureFormatError;
type errors_CertificateInvalidSignerError = CertificateInvalidSignerError;
declare const errors_CertificateInvalidSignerError: typeof CertificateInvalidSignerError;
type errors_CertificateNotSignedError = CertificateNotSignedError;
declare const errors_CertificateNotSignedError: typeof CertificateNotSignedError;
type errors_ContractDeploymentFailedError = ContractDeploymentFailedError;
declare const errors_ContractDeploymentFailedError: typeof ContractDeploymentFailedError;
type errors_ContractInterfaceError = ContractInterfaceError;
declare const errors_ContractInterfaceError: typeof ContractInterfaceError;
type errors_DATA = DATA;
declare const errors_DATA: typeof DATA;
type errors_DataType<ErrorCodeT extends ErrorCode> = DataType<ErrorCodeT>;
type errors_DefaultErrorData = DefaultErrorData;
type errors_EIP1193 = EIP1193;
declare const errors_EIP1193: typeof EIP1193;
type errors_EIP1193ChainDisconnected = EIP1193ChainDisconnected;
declare const errors_EIP1193ChainDisconnected: typeof EIP1193ChainDisconnected;
type errors_EIP1193Disconnected = EIP1193Disconnected;
declare const errors_EIP1193Disconnected: typeof EIP1193Disconnected;
type errors_EIP1193ProviderRpcErrorData = EIP1193ProviderRpcErrorData;
type errors_EIP1193Unauthorized = EIP1193Unauthorized;
declare const errors_EIP1193Unauthorized: typeof EIP1193Unauthorized;
type errors_EIP1193UnsupportedMethod = EIP1193UnsupportedMethod;
declare const errors_EIP1193UnsupportedMethod: typeof EIP1193UnsupportedMethod;
type errors_EIP1193UserRejectedRequest = EIP1193UserRejectedRequest;
declare const errors_EIP1193UserRejectedRequest: typeof EIP1193UserRejectedRequest;
declare const errors_ERROR_CODES: typeof ERROR_CODES;
type errors_ErrorBase<ErrorCodeT extends ErrorCode, DataTypeT> = ErrorBase<ErrorCodeT, DataTypeT>;
declare const errors_ErrorBase: typeof ErrorBase;
declare const errors_ErrorClassMap: typeof ErrorClassMap;
type errors_ErrorCode = ErrorCode;
type errors_ErrorType<ErrorCodeT> = ErrorType<ErrorCodeT>;
type errors_FUNCTION = FUNCTION;
declare const errors_FUNCTION: typeof FUNCTION;
type errors_HDNODE = HDNODE;
declare const errors_HDNODE: typeof HDNODE;
type errors_HTTPClientError = HTTPClientError;
declare const errors_HTTPClientError: typeof HTTPClientError;
type errors_HTTPClientErrorData = HTTPClientErrorData;
type errors_HTTP_CLIENT = HTTP_CLIENT;
declare const errors_HTTP_CLIENT: typeof HTTP_CLIENT;
type errors_InvalidAbiDataToDecodeError = InvalidAbiDataToDecodeError;
declare const errors_InvalidAbiDataToDecodeError: typeof InvalidAbiDataToDecodeError;
type errors_InvalidAbiDataToEncodeError = InvalidAbiDataToEncodeError;
declare const errors_InvalidAbiDataToEncodeError: typeof InvalidAbiDataToEncodeError;
type errors_InvalidAbiEventError = InvalidAbiEventError;
declare const errors_InvalidAbiEventError: typeof InvalidAbiEventError;
type errors_InvalidAbiFormatTypeError = InvalidAbiFormatTypeError;
declare const errors_InvalidAbiFormatTypeError: typeof InvalidAbiFormatTypeError;
type errors_InvalidAbiFunctionError = InvalidAbiFunctionError;
declare const errors_InvalidAbiFunctionError: typeof InvalidAbiFunctionError;
type errors_InvalidAddressError = InvalidAddressError;
declare const errors_InvalidAddressError: typeof InvalidAddressError;
type errors_InvalidBloomError = InvalidBloomError;
declare const errors_InvalidBloomError: typeof InvalidBloomError;
type errors_InvalidDataReturnTypeError = InvalidDataReturnTypeError;
declare const errors_InvalidDataReturnTypeError: typeof InvalidDataReturnTypeError;
type errors_InvalidDataTypeError = InvalidDataTypeError;
declare const errors_InvalidDataTypeError: typeof InvalidDataTypeError;
type errors_InvalidHDNodeChaincodeError = InvalidHDNodeChaincodeError;
declare const errors_InvalidHDNodeChaincodeError: typeof InvalidHDNodeChaincodeError;
type errors_InvalidHDNodeDerivationPathError = InvalidHDNodeDerivationPathError;
declare const errors_InvalidHDNodeDerivationPathError: typeof InvalidHDNodeDerivationPathError;
type errors_InvalidHDNodeMnemonicsError = InvalidHDNodeMnemonicsError;
declare const errors_InvalidHDNodeMnemonicsError: typeof InvalidHDNodeMnemonicsError;
type errors_InvalidHDNodePrivateKeyError = InvalidHDNodePrivateKeyError;
declare const errors_InvalidHDNodePrivateKeyError: typeof InvalidHDNodePrivateKeyError;
type errors_InvalidHDNodePublicKeyError = InvalidHDNodePublicKeyError;
declare const errors_InvalidHDNodePublicKeyError: typeof InvalidHDNodePublicKeyError;
type errors_InvalidKError = InvalidKError;
declare const errors_InvalidKError: typeof InvalidKError;
type errors_InvalidKeystoreError = InvalidKeystoreError;
declare const errors_InvalidKeystoreError: typeof InvalidKeystoreError;
type errors_InvalidKeystorePasswordError = InvalidKeystorePasswordError;
declare const errors_InvalidKeystorePasswordError: typeof InvalidKeystorePasswordError;
type errors_InvalidRLPError = InvalidRLPError;
declare const errors_InvalidRLPError: typeof InvalidRLPError;
type errors_InvalidRLPErrorData = InvalidRLPErrorData;
type errors_InvalidSecp256k1MessageHashError = InvalidSecp256k1MessageHashError;
declare const errors_InvalidSecp256k1MessageHashError: typeof InvalidSecp256k1MessageHashError;
type errors_InvalidSecp256k1PrivateKeyError = InvalidSecp256k1PrivateKeyError;
declare const errors_InvalidSecp256k1PrivateKeyError: typeof InvalidSecp256k1PrivateKeyError;
type errors_InvalidSecp256k1SignatureError = InvalidSecp256k1SignatureError;
declare const errors_InvalidSecp256k1SignatureError: typeof InvalidSecp256k1SignatureError;
type errors_InvalidSecp256k1SignatureRecoveryError = InvalidSecp256k1SignatureRecoveryError;
declare const errors_InvalidSecp256k1SignatureRecoveryError: typeof InvalidSecp256k1SignatureRecoveryError;
type errors_JSONRPC = JSONRPC;
declare const errors_JSONRPC: typeof JSONRPC;
type errors_JSONRPCDefaultError = JSONRPCDefaultError;
declare const errors_JSONRPCDefaultError: typeof JSONRPCDefaultError;
type errors_JSONRPCErrorData = JSONRPCErrorData;
type errors_JSONRPCInternalError = JSONRPCInternalError;
declare const errors_JSONRPCInternalError: typeof JSONRPCInternalError;
type errors_JSONRPCInvalidParams = JSONRPCInvalidParams;
declare const errors_JSONRPCInvalidParams: typeof JSONRPCInvalidParams;
type errors_JSONRPCInvalidRequest = JSONRPCInvalidRequest;
declare const errors_JSONRPCInvalidRequest: typeof JSONRPCInvalidRequest;
type errors_KEYSTORE = KEYSTORE;
declare const errors_KEYSTORE: typeof KEYSTORE;
type errors_NotImplementedError = NotImplementedError;
declare const errors_NotImplementedError: typeof NotImplementedError;
type errors_POLL_ERROR = POLL_ERROR;
declare const errors_POLL_ERROR: typeof POLL_ERROR;
type errors_PollErrorData = PollErrorData;
type errors_PollExecutionError = PollExecutionError;
declare const errors_PollExecutionError: typeof PollExecutionError;
type errors_ProviderRpcError = ProviderRpcError;
declare const errors_ProviderRpcError: typeof ProviderRpcError;
type errors_RLP_ERRORS = RLP_ERRORS;
declare const errors_RLP_ERRORS: typeof RLP_ERRORS;
type errors_SECP256K1 = SECP256K1;
declare const errors_SECP256K1: typeof SECP256K1;
type errors_TRANSACTION = TRANSACTION;
declare const errors_TRANSACTION: typeof TRANSACTION;
type errors_TransactionAlreadySignedError = TransactionAlreadySignedError;
declare const errors_TransactionAlreadySignedError: typeof TransactionAlreadySignedError;
type errors_TransactionBodyError = TransactionBodyError;
declare const errors_TransactionBodyError: typeof TransactionBodyError;
type errors_TransactionDelegationError = TransactionDelegationError;
declare const errors_TransactionDelegationError: typeof TransactionDelegationError;
type errors_TransactionMissingPrivateKeyError = TransactionMissingPrivateKeyError;
declare const errors_TransactionMissingPrivateKeyError: typeof TransactionMissingPrivateKeyError;
type errors_TransactionNotSignedError = TransactionNotSignedError;
declare const errors_TransactionNotSignedError: typeof TransactionNotSignedError;
declare const errors_assert: typeof assert;
declare const errors_assertInnerError: typeof assertInnerError;
declare const errors_buildError: typeof buildError;
declare const errors_buildErrorMessage: typeof buildErrorMessage;
declare const errors_buildProviderError: typeof buildProviderError;
declare const errors_getEIP1193ErrorCode: typeof getEIP1193ErrorCode;
declare const errors_getJSONRPCErrorCode: typeof getJSONRPCErrorCode;
declare const errors_stringifyData: typeof stringifyData;
declare namespace errors {
  export { errors_ABI as ABI, errors_ADDRESS as ADDRESS, errors_BLOOM as BLOOM, errors_CERTIFICATE as CERTIFICATE, errors_CONTRACT as CONTRACT, errors_CertificateInvalidSignatureFormatError as CertificateInvalidSignatureFormatError, errors_CertificateInvalidSignerError as CertificateInvalidSignerError, errors_CertificateNotSignedError as CertificateNotSignedError, errors_ContractDeploymentFailedError as ContractDeploymentFailedError, errors_ContractInterfaceError as ContractInterfaceError, errors_DATA as DATA, type errors_DataType as DataType, type errors_DefaultErrorData as DefaultErrorData, errors_EIP1193 as EIP1193, errors_EIP1193ChainDisconnected as EIP1193ChainDisconnected, errors_EIP1193Disconnected as EIP1193Disconnected, type errors_EIP1193ProviderRpcErrorData as EIP1193ProviderRpcErrorData, errors_EIP1193Unauthorized as EIP1193Unauthorized, errors_EIP1193UnsupportedMethod as EIP1193UnsupportedMethod, errors_EIP1193UserRejectedRequest as EIP1193UserRejectedRequest, errors_ERROR_CODES as ERROR_CODES, errors_ErrorBase as ErrorBase, errors_ErrorClassMap as ErrorClassMap, type errors_ErrorCode as ErrorCode, type errors_ErrorType as ErrorType, errors_FUNCTION as FUNCTION, errors_HDNODE as HDNODE, errors_HTTPClientError as HTTPClientError, type errors_HTTPClientErrorData as HTTPClientErrorData, errors_HTTP_CLIENT as HTTP_CLIENT, errors_InvalidAbiDataToDecodeError as InvalidAbiDataToDecodeError, errors_InvalidAbiDataToEncodeError as InvalidAbiDataToEncodeError, errors_InvalidAbiEventError as InvalidAbiEventError, errors_InvalidAbiFormatTypeError as InvalidAbiFormatTypeError, errors_InvalidAbiFunctionError as InvalidAbiFunctionError, errors_InvalidAddressError as InvalidAddressError, errors_InvalidBloomError as InvalidBloomError, errors_InvalidDataReturnTypeError as InvalidDataReturnTypeError, errors_InvalidDataTypeError as InvalidDataTypeError, errors_InvalidHDNodeChaincodeError as InvalidHDNodeChaincodeError, errors_InvalidHDNodeDerivationPathError as InvalidHDNodeDerivationPathError, errors_InvalidHDNodeMnemonicsError as InvalidHDNodeMnemonicsError, errors_InvalidHDNodePrivateKeyError as InvalidHDNodePrivateKeyError, errors_InvalidHDNodePublicKeyError as InvalidHDNodePublicKeyError, errors_InvalidKError as InvalidKError, errors_InvalidKeystoreError as InvalidKeystoreError, errors_InvalidKeystorePasswordError as InvalidKeystorePasswordError, errors_InvalidRLPError as InvalidRLPError, type errors_InvalidRLPErrorData as InvalidRLPErrorData, errors_InvalidSecp256k1MessageHashError as InvalidSecp256k1MessageHashError, errors_InvalidSecp256k1PrivateKeyError as InvalidSecp256k1PrivateKeyError, errors_InvalidSecp256k1SignatureError as InvalidSecp256k1SignatureError, errors_InvalidSecp256k1SignatureRecoveryError as InvalidSecp256k1SignatureRecoveryError, errors_JSONRPC as JSONRPC, errors_JSONRPCDefaultError as JSONRPCDefaultError, type errors_JSONRPCErrorData as JSONRPCErrorData, errors_JSONRPCInternalError as JSONRPCInternalError, errors_JSONRPCInvalidParams as JSONRPCInvalidParams, errors_JSONRPCInvalidRequest as JSONRPCInvalidRequest, errors_KEYSTORE as KEYSTORE, errors_NotImplementedError as NotImplementedError, errors_POLL_ERROR as POLL_ERROR, type errors_PollErrorData as PollErrorData, errors_PollExecutionError as PollExecutionError, errors_ProviderRpcError as ProviderRpcError, errors_RLP_ERRORS as RLP_ERRORS, errors_SECP256K1 as SECP256K1, errors_TRANSACTION as TRANSACTION, errors_TransactionAlreadySignedError as TransactionAlreadySignedError, errors_TransactionBodyError as TransactionBodyError, errors_TransactionDelegationError as TransactionDelegationError, errors_TransactionMissingPrivateKeyError as TransactionMissingPrivateKeyError, errors_TransactionNotSignedError as TransactionNotSignedError, errors_assert as assert, errors_assertInnerError as assertInnerError, errors_buildError as buildError, errors_buildErrorMessage as buildErrorMessage, errors_buildProviderError as buildProviderError, errors_getEIP1193ErrorCode as getEIP1193ErrorCode, errors_getJSONRPCErrorCode as getJSONRPCErrorCode, errors_stringifyData as stringifyData };
}

export { ABI, ADDRESS, BLOOM, CERTIFICATE, CONTRACT, CertificateInvalidSignatureFormatError, CertificateInvalidSignerError, CertificateNotSignedError, ContractDeploymentFailedError, ContractInterfaceError, DATA, type DataType, type DefaultErrorData, EIP1193, EIP1193ChainDisconnected, EIP1193Disconnected, type EIP1193ProviderRpcErrorData, EIP1193Unauthorized, EIP1193UnsupportedMethod, EIP1193UserRejectedRequest, ERROR_CODES, ErrorBase, ErrorClassMap, type ErrorCode, type ErrorType, FUNCTION, HDNODE, HTTPClientError, type HTTPClientErrorData, HTTP_CLIENT, InvalidAbiDataToDecodeError, InvalidAbiDataToEncodeError, InvalidAbiEventError, InvalidAbiFormatTypeError, InvalidAbiFunctionError, InvalidAddressError, InvalidBloomError, InvalidDataReturnTypeError, InvalidDataTypeError, InvalidHDNodeChaincodeError, InvalidHDNodeDerivationPathError, InvalidHDNodeMnemonicsError, InvalidHDNodePrivateKeyError, InvalidHDNodePublicKeyError, InvalidKError, InvalidKeystoreError, InvalidKeystorePasswordError, InvalidRLPError, type InvalidRLPErrorData, InvalidSecp256k1MessageHashError, InvalidSecp256k1PrivateKeyError, InvalidSecp256k1SignatureError, InvalidSecp256k1SignatureRecoveryError, JSONRPC, JSONRPCDefaultError, type JSONRPCErrorData, JSONRPCInternalError, JSONRPCInvalidParams, JSONRPCInvalidRequest, KEYSTORE, NotImplementedError, POLL_ERROR, type PollErrorData, PollExecutionError, ProviderRpcError, RLP_ERRORS, SECP256K1, TRANSACTION, TransactionAlreadySignedError, TransactionBodyError, TransactionDelegationError, TransactionMissingPrivateKeyError, TransactionNotSignedError, assert, assertInnerError, buildError, buildErrorMessage, buildProviderError, errors, getEIP1193ErrorCode, getJSONRPCErrorCode, stringifyData };
