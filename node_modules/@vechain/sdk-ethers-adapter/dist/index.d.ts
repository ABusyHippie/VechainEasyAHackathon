import { vechain_sdk_core_ethers } from '@vechain/sdk-core';
import { HardhatVeChainProvider } from '@vechain/sdk-network';

/**
 * Contract adapter for the VeChain hardhat plugin
 *
 * @param contract - The contract to adapt to the VeChain network
 * @param hardhatVeChainProvider - The hardhatVeChain provider
 * @returns The adapted contract
 */
declare const contractAdapter: (contract: vechain_sdk_core_ethers.Contract, hardhatVeChainProvider: HardhatVeChainProvider) => vechain_sdk_core_ethers.Contract;

/**
 * Factory adapter for the VeChain hardhat plugin
 *
 * @param contractFactory - The contract factory to adapt to the VeChain network
 * @param hardhatVeChainProvider - The hardhatVeChain provider
 * @returns The adapted contract factory
 */
declare function factoryAdapter<A extends unknown[], I>(contractFactory: vechain_sdk_core_ethers.ContractFactory<A, I>, hardhatVeChainProvider: HardhatVeChainProvider): vechain_sdk_core_ethers.ContractFactory<A, I>;

declare const helpers: {
    getContractAddress: (txId: string, hardhatVeChainProvider: HardhatVeChainProvider) => Promise<string>;
};

declare const ethersAdapter_contractAdapter: typeof contractAdapter;
declare const ethersAdapter_factoryAdapter: typeof factoryAdapter;
declare const ethersAdapter_helpers: typeof helpers;
declare namespace ethersAdapter {
  export { ethersAdapter_contractAdapter as contractAdapter, ethersAdapter_factoryAdapter as factoryAdapter, ethersAdapter_helpers as helpers };
}

export { ethersAdapter as adapters, contractAdapter, factoryAdapter, helpers };
