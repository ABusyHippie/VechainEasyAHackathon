var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};

// src/ethers-adapter.ts
var ethers_adapter_exports = {};
__export(ethers_adapter_exports, {
  contractAdapter: () => contractAdapter,
  factoryAdapter: () => factoryAdapter,
  helpers: () => helpers
});

// src/adapters/helpers.ts
var getContractAddress = async (txId, hardhatVeChainProvider) => {
  const tx = await hardhatVeChainProvider.thorClient.transactions.waitForTransaction(
    txId
  );
  return tx?.outputs[0].contractAddress ?? "";
};
var helpers = {
  getContractAddress
};

// src/adapters/contract-adapter.ts
var contractAdapter = (contract, hardhatVeChainProvider) => {
  contract.getAddress = async function getAddress() {
    return await helpers.getContractAddress(
      contract.deploymentTransaction()?.hash ?? "",
      hardhatVeChainProvider
    );
  };
  return contract;
};

// src/adapters/factory-adapter.ts
import { vechain_sdk_core_ethers } from "@vechain/sdk-core";
function factoryAdapter(contractFactory, hardhatVeChainProvider) {
  contractFactory.deploy = async function(...args) {
    const tx = await this.getDeployTransaction(...args);
    vechain_sdk_core_ethers.assert(
      this.runner != null && typeof this.runner.sendTransaction === "function",
      "factory runner does not support sending transactions",
      "UNSUPPORTED_OPERATION",
      {
        operation: "sendTransaction"
      }
    );
    const sentTx = await this.runner.sendTransaction(tx);
    const receipt = await hardhatVeChainProvider.thorClient.transactions.waitForTransaction(
      sentTx.hash
    );
    return new vechain_sdk_core_ethers.BaseContract(
      receipt?.outputs[0].contractAddress ?? "",
      this.interface,
      this.runner,
      sentTx
    );
  };
  return contractFactory;
}
export {
  ethers_adapter_exports as adapters,
  contractAdapter,
  factoryAdapter,
  helpers
};
