"use strict";

// src/helpers/provider-helper.ts
var import_sdk_network = require("@vechain/sdk-network");
var import_sdk_errors = require("@vechain/sdk-errors");
var import_sdk_core = require("@vechain/sdk-core");
var createWalletFromHardhatNetworkConfig = (networkConfig) => {
  const accountFromConfig = networkConfig.accounts;
  if (accountFromConfig === void 0)
    return new import_sdk_network.ProviderInternalBaseWallet([], {});
  else {
    if (accountFromConfig === "remote")
      throw (0, import_sdk_errors.buildError)(
        "createWalletFromHardhatNetworkConfig",
        import_sdk_errors.JSONRPC.INTERNAL_ERROR,
        "Remote accounts are not supported in hardhat network configuration."
      );
    if (Array.isArray(accountFromConfig)) {
      return new import_sdk_network.ProviderInternalBaseWallet(
        accountFromConfig.map((privateKey) => {
          const privateKeyBuffer = Buffer.from(
            privateKey.startsWith("0x") ? privateKey.slice(2) : privateKey,
            "hex"
          );
          return {
            privateKey: privateKeyBuffer,
            publicKey: Buffer.from(
              import_sdk_core.secp256k1.derivePublicKey(privateKeyBuffer)
            ),
            address: import_sdk_core.addressUtils.fromPrivateKey(privateKeyBuffer)
          };
        }),
        {
          delegator: (0, import_sdk_network.DelegationHandler)(
            networkConfig.delegator
          ).delegatorOrUndefined()
        }
      );
    } else {
      return new import_sdk_network.ProviderInternalHDWallet(
        accountFromConfig.mnemonic.split(" "),
        accountFromConfig.count,
        accountFromConfig.initialIndex,
        accountFromConfig.path,
        {
          delegator: (0, import_sdk_network.DelegationHandler)(
            networkConfig.delegator
          ).delegatorOrUndefined()
        }
      );
    }
  }
};

// src/index.ts
var import_config2 = require("hardhat/config");
var import_plugins = require("hardhat/plugins");
var import_helpers2 = require("@nomicfoundation/hardhat-ethers/internal/helpers");
var import_sdk_network2 = require("@vechain/sdk-network");
var import_sdk_logging = require("@vechain/sdk-logging");
var import_sdk_core2 = require("@vechain/sdk-core");

// src/type-extensions.ts
var import_config = require("hardhat/types/config");
var import_runtime = require("hardhat/types/runtime");

// src/index.ts
var import_hardhat_ethers_provider = require("@nomicfoundation/hardhat-ethers/internal/hardhat-ethers-provider");
var import_sdk_ethers_adapter = require("@vechain/sdk-ethers-adapter");
(0, import_config2.extendEnvironment)((hre) => {
  const networkName = hre.network.name;
  const networkConfig = hre.config.networks[networkName];
  const debug = networkConfig.debug !== void 0 && networkConfig.debug;
  const enableDelegation = networkConfig.enableDelegation !== void 0 && networkConfig.enableDelegation;
  if (!networkName.includes("vechain")) {
    (0, import_sdk_logging.VeChainSDKLogger)("warning").log({
      title: "You are operating on a non-vechain network",
      messages: [
        "Ensure your hardhat config file has a network that:",
        "	1. Is a VeChain valid network (set url and optionally delegator parameter)",
        '	2. Has the name of the network containing "vechain" (e.g. "vechain_mainnet", "vechain_testnet", "vechain_solo", ...)',
        "",
        "This is required to use the VeChain provider and its functions.",
        "Note that this is only a warning and you can use hardhat without a VeChain network.",
        "BUT it's possible that some functionalities will not be available."
      ]
    });
    return;
  }
  const hardhatVeChainProvider = new import_sdk_network2.HardhatVeChainProvider(
    createWalletFromHardhatNetworkConfig(networkConfig),
    networkConfig.url,
    (message, parent) => new import_plugins.HardhatPluginError(
      "@vechain/sdk-hardhat-plugin",
      message,
      parent
    ),
    debug,
    enableDelegation
  );
  hre.VeChainProvider = (0, import_plugins.lazyObject)(() => hardhatVeChainProvider);
  hre.network.provider = hardhatVeChainProvider;
  hre.ethers = (0, import_plugins.lazyObject)(() => {
    const vechainNewHardhatProvider = new import_hardhat_ethers_provider.HardhatEthersProvider(
      hardhatVeChainProvider,
      hre.network.name
    );
    return {
      ...import_sdk_core2.vechain_sdk_core_ethers,
      deployContract: async (...args) => {
        const deployContractBound = import_helpers2.deployContract.bind(null, hre);
        return await deployContractBound(...args).then(
          (contract) => (0, import_sdk_ethers_adapter.contractAdapter)(contract, hardhatVeChainProvider)
        );
      },
      getContractFactory: async (...args) => {
        const contractFactoryBound = import_helpers2.getContractFactory.bind(null, hre);
        return await contractFactoryBound(...args).then(
          (factory) => (0, import_sdk_ethers_adapter.factoryAdapter)(factory, hardhatVeChainProvider)
        );
      },
      getContractFactoryFromArtifact: async (artifact, signerOrOptions) => {
        const getContractFactoryFromArtifactInstance = import_helpers2.getContractFactoryFromArtifact;
        const contractFactoryFromArtifactBound = getContractFactoryFromArtifactInstance.bind(null, hre);
        return await contractFactoryFromArtifactBound(
          artifact,
          signerOrOptions
        ).then(
          (factory) => (0, import_sdk_ethers_adapter.factoryAdapter)(factory, hardhatVeChainProvider)
        );
      },
      getImpersonatedSigner: (_address) => {
        throw new Error("Not implemented yet");
      },
      getContractAtFromArtifact: import_helpers2.getContractAtFromArtifact.bind(
        null,
        hre
      ),
      getContractAt: import_helpers2.getContractAt.bind(null, hre),
      // Signer
      getSigner: async (address) => await (0, import_helpers2.getSigner)(hre, address),
      getSigners: async () => await (0, import_helpers2.getSigners)(hre),
      provider: vechainNewHardhatProvider
    };
  });
});
